function [totmoveTrialNum , outputLog] = ep_fixMovement(inFile, startChunk, endChunk, badDataCriteria, badChans, butterflyFig, theSubject)%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% [totmoveTrialNum , outputLog] = ep_fixMovement(inFile, startChunk, endChunk, badDataCriteria, badChans, butterflyFig, theSubject)%%	Reads in file chunks generated by chunkInputFile function.  It runs an ICA on each individual trial%   and drops factors corresponding to large noise sources (usually movement artifact).%	Function runs through all the files given and outputs them as fixed chunks.%	chunks will still need to be rejoined.%%Inputs%	inFile:     filename (not including the .mat suffix or chunk number.  e.g., "NT5") and sourcepath.%	startChunk: starting chunk (usually 1)%   endChunk:   ending chunk%   badDataCriteria:  Criteria for detecting bad data.%       .window:    moving average window for smoothing%       .minmax:    difference from minimum to maximum for bad channel%       .trialminmax:  difference from minimum to maximum for bad trial%       .badnum:    percent of bad channels exceeded to declare bad trial, rounding down%       .hminmax:   difference from minimum to maximum for bad horizontal EOG%       .neighbors: number of electrodes considered to be neighbors%       .badchan:   maximum microvolt difference allowed from best matching neighbor%       .maxneighbor:   maximum microvolt difference allowed from best matching neighbor%       .blink:     threshold correlation with blink template, 0 to 1%       .detrend:   1 to detrend%       .badtrials: percentage of good trials chan is bad to declare a channel globally bad%       .replace:   1 to interpolate bad channels from neighbors.%       .noadjacent:1 to not allow adjacent bad channels (trial or subject declared bad)%       .movefacs  : number of factors to retain during movement correction.%       .channelMode: 'replace' to interpolate bad channels, 'mark' to mark them with a spike, and 'none' to do nothing.%       .trialMode: 'fix' to fix bad trial data and 'none' to do nothing.%   badChans:   list of bad channels to exclude from blink detection process.  Will be set to a flat line.%   butterflyFig:  the handle for the output figure.  Otherwise, will open a new figure.%   theSubject: which subject of the file is being processed.%%   The input chunks are EP format data files.%%Outputs%	totmoveTrialNum: Total list of movement trials.%	Saves files with movement artifact removed, replacing the original chunked files.%   outputLog: output messages from noise fixing process%% History:%% by Joseph Dien (5/26/09)% jdien07@mac.com%% modified 10/28/09 JD% Added option to disable preprocessing figure for low memory situations.%% modified 2/11/10 JD% Will now work with subject average files with multiple subjects.% MoveTrial no longer initialized to zero.%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     Copyright (C) 1999-2010  Joseph Dien%%     This program is free software: you can redistribute it and/or modify%     it under the terms of the GNU General Public License as published by%     the Free Software Foundation, either version 3 of the License, or%     (at your option) any later version.%%     This program is distributed in the hope that it will be useful,%     but WITHOUT ANY WARRANTY; without even the implied warranty of%     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the%     GNU General Public License for more details.%%     You should have received a copy of the GNU General Public License%     along with this program.  If not, see <http://www.gnu.org/licenses/>.msg='Fixing movement artifacts.';disp(msg);outputLog{1}=msg;moveTrialNum = [];badChans = badChans(find(badChans));	%drop out bad channels set as being zerooutputLog=[];count=0;icadefs;warning off GLREN:doubleBufferSlow; %Turn off warning message about doublebuffer not available.if nargin < 6    butterflyFig=figure('Name','Movement Artifact Correction','NumberTitle','off');end;for chunk = startChunk:endChunk    disp([deblank(inFile) '-' num2str(chunk)]);    eval(['load ''' deblank(inFile) '''-' num2str(chunk) '.mat']);    if length(dataChunk.facNames) > 1        disp('This function is not intended for application to factor data.');        return    end;    numChans=length(dataChunk.chanNames);    trialdata=reshape(dataChunk.data(:,:,:,theSubject),numChans,[]);    subtractedNoise = zeros(size(trialdata));    trialSize = length(dataChunk.timeNames);    numTrials = length(dataChunk.cellNames);    moveTrialNum{chunk}=dataChunk.analysis.moveTrial;    chans = [1:numChans];    chans(badChans)=0;    chans = chans(find(chans));    displayPeriod=size(trialdata,2);    %Number of timepoints to graph in display.    if nargin < 6        subplot(3,1,1), plot([1:displayPeriod],trialdata(chans,1:displayPeriod));        axis([1 displayPeriod -200 200])        title([deblank(inFile) '-' num2str(chunk)],'Interpreter','none');    end;    fprintf('%60s\n',' ' );    for trial =1:numTrials        fprintf('%s%-60s',repmat(sprintf('\b'),1,60),sprintf('%s%4d','Working on trial# ', trial))        theData=trialdata(chans,(trial-1)*trialSize+1:trial*trialSize);        S = cov(theData); %covariance matrix        if ~any(~diag(S)) %if any time points have zero variance, may not be factorable and definitely not fixable            Sd = diag(sqrt(diag(S)));  %diagonal matrix of standard deviations of variables as used to generate relationship matrix            [V,L] = eig(S);            V = fliplr(V);            numFac=badDataCriteria.movefacs;            V = V(:,1:numFac);  %truncated eigenvector matrix            FacScr = (theData) * V;    %factor scores, not mean corrected.            ScrDiag = diag(std(FacScr));            A = inv(Sd) * (V * ScrDiag);  %unrotated factor loading matrix            C = sum((A.^2),2)';            A = (diag(sqrt(C).^-1)) * A;  %factor loadings Kaiser-normalized by communalities            [FacPat]= ep_doVarimax(A);            FacPat = diag(sqrt(C)) * FacPat;  %renormalize factor loadings by original communalities            [FacPat, FacCor] = ep_doPromax(FacPat, 3); %Only apply loading weighting to the Varimax step            %to match SAS output and to avoid rounding errors.            FacStr = FacPat * FacCor;	%factor structure matrix (Harman, eq. 12.19, p. 268)            invR=pinv(corrcoef(theData));            FacCof=invR*FacStr;            FacScr=(theData)*FacCof;            FacScr=(FacScr)*inv(diag(std(FacScr)));            noiseFacs=find(abs(max(abs(Sd*FacPat)).*(max(FacScr)-min(FacScr))) > badDataCriteria.trialminmax);            if ~isempty(noiseFacs) %if there are noise factors, subtract them out                FacScrFull = zeros(numChans,numFac);                for i = 1:length(chans)                    FacScrFull(chans(i),:)=FacScr(i,:);                end;                temp = zeros(numFac,1);                temp(noiseFacs) = 1;                noisedata = FacScrFull * (Sd*FacPat* diag(temp))';                nonoisedata= trialdata(:,(trial-1)*trialSize+1:trial*trialSize) - noisedata;                trialdata(:,(trial-1)*trialSize+1:trial*trialSize) = nonoisedata;                subtractedNoise(:,(trial-1)*trialSize+1:trial*trialSize) = noisedata;                count=count+1;                moveTrialNum{chunk}(trial)=1;            end;        end;    end    fprintf('%60s\n',' ' );    if count == 1        msg='1 trial corrected for movement activity.';    else        msg=[num2str(count) ' trials corrected for movement activity.'];    end    disp(msg);    outputLog{end+1}=msg;    if ~isempty(butterflyFig)        if nargin < 6            figure(butterflyFig(chunk));            subplot(3,1,2), plot([1:displayPeriod],subtractedNoise([badChans chans],1:displayPeriod));            title('subtracted movement artifacts','Interpreter','none');            axis([1 displayPeriod -200 200])            subplot(3,1,3), plot([1:displayPeriod],trialdata([badChans chans],1:displayPeriod));            title('with movement artifacts subtracted','Interpreter','none');            axis([1 displayPeriod -200 200])        else            figure(butterflyFig(chunk));            subplot(8,1,5), plot([1:displayPeriod],subtractedNoise([badChans chans],1:displayPeriod));            title('subtracted movement artifacts','Interpreter','none');            axis([1 displayPeriod -200 200])            subplot(8,1,6), plot([1:displayPeriod],trialdata([badChans chans],1:displayPeriod));            title('with movement artifacts subtracted','Interpreter','none');            axis([1 displayPeriod -200 200])        end;    end;    if count == 0        msg='No components met threshold so no correction performed.';        disp(msg);        outputLog{end+1}=msg;        if ~isempty(butterflyFig)            if nargin < 6                figure(butterflyFig(chunk));                subplot(3,1,2), plot([1:displayPeriod],ones(1,displayPeriod));                axis([1 displayPeriod -200 200])                subplot(3,1,3), plot([1:displayPeriod],trialdata([badChans chans],1:displayPeriod));                title('no movement artifacts subtracted','Interpreter','none');                axis([1 displayPeriod -200 200])            else                figure(butterflyFig(chunk));                subplot(8,1,5), plot([1:displayPeriod],ones(1,displayPeriod));                axis([1 displayPeriod -200 200])                subplot(8,1,6), plot([1:displayPeriod],trialdata([badChans chans],1:displayPeriod));                title('no movement artifacts subtracted','Interpreter','none');                axis([1 displayPeriod -200 200])            end;        end;    end;    drawnow    dataChunk.data(:,:,:,theSubject)=reshape(trialdata,numChans,trialSize,numTrials);    dataChunk.analysis.moveTrial(theSubject,:)=moveTrialNum{chunk};    eval (['save ''' inFile '''-' num2str(chunk) '.mat dataChunk;']);    if nargin < 6        try            eval (['print -f' num2str(butterflyFig(chunk)) ' -djpeg ''' inFile '''-' num2str(chunk) 'move.jpg']);        catch            disp('Couldn''t save a copy of the movement correction figure.  Perhaps your version of Matlab is not current.');        end;    end;end;if nargin < 6    close(butterflyFig);end;totmoveTrialNum=[];for chunk = startChunk:endChunk    totmoveTrialNum=[totmoveTrialNum moveTrialNum{chunk}];end;