function sourceLeadField = source_leadfield(obj, index, varargin)
% SOURCE_LEADFIELD
% Distribution of scalp potentials generated by one or more sources
%
% lf = source_leadfield(obj, index)
%
% where
%
% OBJ is a head.mri object
%
% INDEX is a vector of source indices or a cell array containing source 
% names
%
%
% ## Accepted key/value pairs
%
% 'Time'    : If provided, this method will return the distribution of
%             scalp potentials at the relevant sampling instant. If not
%             provided or empty, the output will be the (normalized)
%             leadfield, which is irrelevant of time and assumes activation
%             equal to one. 
%             
%
% See also: head.mri


import misc.process_varargin;

if nargin < 2 || isempty(index), index = 1:obj.NbSources; end

keySet = {'time','inversesolution'};
time = [];
inversesolution=false;
eval(process_varargin(keySet, varargin));


MissingLeadField = MException('head:mri:make_source_leadfield', ...
    'You need to run make_source_grid_leadfield() first!');

if isempty(obj.LeadField),
    throw(MissingLeadField);
end

if ischar(index) || iscell(index),
    index = source_index(obj, index);
end


if obj.NbSources < 1,
    sourceLeadField = [];
    return;
end

% Generate the source leadfields
if numel(time) < 2 && numel(index) > 1,
    sourceLeadField = nan(obj.NbSensors, numel(index));
elseif numel(index) == 1,
    sourceLeadField = nan(obj.NbSensors, numel(time));
else
    sourceLeadField = cell(1, numel(index));    
end

for i = 1:numel(index)
    thisLF = zeros(obj.NbSensors, max(1, numel(time)));
    if inversesolution,
        for voxelItr = 1:numel(obj.InverseSolution(index(i)).pnt) %#ok<UNRCH>
            if ~isempty(time) && ...
                    size(obj.InverseSolution(index(i)).activation,2) == 1,
                activation = ...
                    obj.InverseSolution(index(i)).activation(voxelItr, 1);
                activation = repmat(activation, 1, numel(time));
            elseif ~isempty(time),
                activation   = ...
                    obj.InverseSolution(index(i)).activation(voxelItr, time);
            else
                % Provide the normalized leadfield
                activation = 1;
            end
            strength     = obj.InverseSolution(index(i)).strength(voxelItr);
            momentum     = [1 1 1]/norm([1 1 1]);
            % This is crappy, change it later to something more elegant..
            for j = 1:obj.NbSources,
                for k = 1:numel(obj.Source(j).pnt),
                    if obj.Source(j).pnt(k) == voxelItr,
                       momentum = obj.Source(j).momentum(k,:);
                       break;
                    end
                end                
            end
            pointIndex   = obj.InverseSolution(index(i)).pnt(voxelItr);
            lf           = reshape(obj.LeadField(:,:,pointIndex), obj.NbSensors, 3);
            
            if ~isempty(time),
                 thisLF = thisLF + repmat(activation, obj.NbSensors, 1).*...
                repmat(strength*lf*momentum', 1, numel(time));
            else
                thisLF = thisLF + strength*lf*momentum';
            end
           
        end
    else
        for voxelItr = 1:numel(obj.Source(index(i)).pnt)
            if ~isempty(time) && ...
                    size(obj.Source(index(i)).activation,2) == 1,
                activation = ...
                    obj.Source(index(i)).activation(voxelItr, 1);
                activation = repmat(activation, 1, numel(time));
            elseif ~isempty(time),
                activation   = ...
                    obj.Source(index(i)).activation(voxelItr, time);
            else
                % Provide the normalized leadfield
                activation = 1;
            end            
            strength     = obj.Source(index(i)).strength(voxelItr);
            momentum     = obj.Source(index(i)).momentum(voxelItr,:);
            pointIndex   = obj.Source(index(i)).pnt(voxelItr);
            lf           = reshape(obj.LeadField(:,:,pointIndex), obj.NbSensors, 3);
            
            if ~isempty(time),
                thisLF = thisLF + repmat(activation, obj.NbSensors, 1).*...
                    repmat(strength*lf*momentum', 1, numel(time));
            else
                thisLF = thisLF + strength*lf*momentum';
            end
        end
    end
    if numel(time) < 2 && numel(index) > 1,
        sourceLeadField(:, i) = thisLF;
    elseif numel(index) == 1,
        sourceLeadField = thisLF;
    else
        sourceLeadField{i} = thisLF;        
    end
end




end