classdef plotter < report.generic.generic
    % PLOTTER - Report on a physioset using plotter object(s)
    %
    % This class can be used to generate a report based on the figures
    % generated by method plot() of class physioset.plotter.plotter interface.
    %
    %
    % ## Usage synopsis:
    %
    %   % Import a sample dataset
    %   dataset = import(physioset.import.matrix, randn(10, 10000));
    % 
    %   % Define a custom snapshot plotter
    %   myPlotter1 = physioset.plotter.snapshots('ScaleFactor', 4);
    %
    %   % Define a default (spatial) psd plotter
    %   myPlotter2 = physioset.plotter.psd;
    %
    %   % Build a report.plotter object that uses our custom plotters
    %   import report.plotter.*;
    %   myReport = plotter('Plotter', {myPlotter1 myPlotter2});
    %
    %   % Initialize the report (open file, create title, etc)
    %   set_name(myReport, get_name(dataset));
    %   initialize(myReport);
    %
    %   % The command above will create D:/tmp/+reportdb/[name].txt , 
    %   % where [name]=get_name(dataset)
    %
    %   % Generate the report
    %   generate(myReport, dataset);
    %
    %   % Generate the HTML report using Remark
    %   report.remark('D:/tmp/+reportdb');
    %
    % 
    % ## Notes:
    %   
    %   * Report configuration is performed via class
    %     report.config.plotter. In fact, the constructor call in the
    %     usage synopsis above implicitly calls the constructor of class
    %     report.config.plotter:
    %   
    %     % Build a configuration object
    %     cfg = report.config.plotter('Plotter', [myPlotter1 myPlotter2]);
    %
    %     % Build the report object
    %     myReport = report.snapshots(cfg);
    %
    %    See the help of class report.config.snapshots for more information
    %    regarding the configuration options available.
    %
    %
    % See also: report.config.plotter, pset.physioset
    
  
    %% IMPLEMENTATION
    methods (Static, Access = private)
       
        % Responds to RootPathChange events
        function update_rootpath(src, ~)           
         
            cfg = get_config(src);
            for i = 1:numel(cfg.Plotter)
               set_config(cfg.Plotter{i}, 'Folder', get_rootpath(src));
            end
            
        end
        
        % Responds to LevelChange events
        function update_level(src, evnt)
           
            cfg = get_config(src);
            set(cfg.Gallery, 'Level', evnt.NewValue + 1);
            
        end
        
    end
    
    %% PUBLIC INTERFACE  ..................................................
    
    % report.report interface
    methods        
        obj = generate(obj, item, varargin);                
    end    
  
    % Constructor
    methods
        
        function obj = plotter(varargin)
            
            obj = obj@report.generic.generic(varargin{:});
            
            addlistener(obj, 'RootPathChange', ...
                @report.plotter.plotter.update_rootpath);
            
            addlistener(obj, 'LevelChange', ...
                @report.plotter.plotter.update_level);
         
        end
        
    end
    
end