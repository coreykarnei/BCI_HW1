function outputFile = run_oge(obj, data)

import oge.qsub;
import oge.condor_submit;
import oge.has_condor;
import goo.pkgisa;
import pset.session;
import mperl.file.spec.*;
import mperl.file.spec.rel2abs;
import misc.dimtype_str;
import misc.var2name;
import datahash.DataHash;

%% The output file generated by this node
outputFile = get_output_filename(obj, data);

%% How do we identify the input data?
if ischar(data),
    
    [~, jobName] = fileparts(data);
    
elseif pkgisa(data, 'physioset.physioset'),
    
    jobName  = get_name(data);
    
elseif iscell(data) && all(cellfun(@(x) ischar(x), data)) && ...
        all(cellfun(@(x) exist(x, 'file'), data)),
    % A cell array of file names 
    [~, name1] = fileparts(data{1}); 
    jobName = name1;   
    hashStr = DataHash(data);
    jobName = [jobName '_' hashStr(1:6)];
    
else
    
    jobName = var2name(data);
    
end

if ~isempty(get_name(obj)),
    jobName = ['meegpipe-' get_name(obj) '-' jobName];
end

%% Save the input data to disk
if pkgisa(data, 'physioset.physioset')
    
    save(data);
    
elseif ischar(data),
    
    % Careful: dont' use rel2abs because that will resolve symbolic links
    % and that is NOT what we want. The reason is that the symbolic link is
    % expected to be located in a writable directory, whereas the target
    % hard link may not be.
    dataFile = rel2abs(data);
    
else
    
    dataFile = [session.instance.tempname '.mat'];
    dataObj  = data; %#ok<NASGU>
    save(dataFile, 'dataObj', '-mat');
    
end

%% Save the node object to disk
plineFile = [session.instance.tempname '.mat'];

% This is not always appropriate. For instance the output of node split is
% worthless so saving it is not desirable. It's better to let the user take
% control
%nodeObj   = set_save(obj, true); %#ok<NASGU>
nodeObj = obj; %#ok<NASGU>
save(plineFile, 'nodeObj', '-mat');

%% Command to load the current session

cmd0  = sprintf('pset.session.instance(''%s'');', ...
    rel2abs(session.instance.Folder));

%% Command to load the node object
cmd1 = sprintf('load(''%s'', ''-mat'');', rel2abs(plineFile));


%% Command to load the input data (cmd2, cmd3)
if pkgisa(data, 'physioset.physioset'),
    
    cmd2 = sprintf('dataObj = pset.load(''%s'');', ...
        rel2abs(data.HdrFile));   
    
elseif ischar(data),
    
    cmd2 = sprintf('dataObj = ''%s'';', rel2abs(dataFile));   
    
else
    
    cmd2 = sprintf('load(''%s'', ''-mat'');', rel2abs(dataFile));
    
end

cmd3 = 'run(nodeObj, dataObj);';

%% Commands to clean up temporary files cm4
cmd4 = sprintf('delete(''%s'');', plineFile);
if ischar(data) || pkgisa(data, 'physioset.physioset'),
    cmd5 = '';
else
    cmd5 = sprintf('delete(''%s'');', dataFile);
end

%% Call qsub or condor_q

cmd00 = sprintf('close all; clear all; clear classes;');
cmd01 = 'meegpipe.initialize;';

if has_condor && strcmp(obj.Queue, 'condor'),
    stdOut  = catfile(pwd, [jobName '.out']);
    stdErr  = catfile(pwd, [jobName '.err']);
    log     = catfile(pwd, [jobName, '.log']);
    matlabLog = catfile(pwd, [jobName '.mlog']);
    condor_submit([cmd00 cmd01 cmd0 cmd1 cmd2 cmd3 cmd4 cmd5], ...
        'Name',      jobName, ...
        'StdOut',    stdOut, ...
        'StdErr',    stdErr, ...
        'Log',       log, ...
        'MatlabLog', matlabLog);
else
    qsub([cmd00 cmd01 cmd0 cmd1 cmd2 cmd3 cmd4 cmd5], ...
        'Name',   jobName, ...
        'Queue',  get_queue(obj));
end

end